pipeline {
    agent any
    
    tools {
        maven 'Maven 3.8.4'
        jdk 'JDK 11'
    }
    
    environment {
        MAIN_BRANCH = 'main'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to Development environment'
                // Add deployment steps here
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch "${MAIN_BRANCH}"
            }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Approve Production Deployment?'
                }
                echo 'Deploying to Production environment'
                // Add deployment steps here
            }
        }
    }
    
    post {
        success {
            emailext subject: "Pipeline Success: ${currentBuild.fullDisplayName}",
                     body: "The pipeline completed successfully.",
                     recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        }
        failure {
            emailext subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                     body: "The pipeline failed. Please check the logs.",
                     recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        }
        always {
            cleanWs()
        }
    }
}